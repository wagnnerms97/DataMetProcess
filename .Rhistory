)
materials <- lapply(names,function(folders) paste0(path,x))
names(materials) <- names
return(materials)
}
load_materials()
load_materials <- function(path="./inst/DataMetProcess_Shiny/"){
names <- c("css","logo","ufrpe","uast","pgea","capes","cnpq","facepe")
folders <- c(
"materials/styles.css",
"materials/Logo.png",
"materials/UFRPE2.png",
"materials/UAST2.png",
"materials/PGEA.png",
"materials/CAPES.png",
"materials/CNPQ.png",
"materials/FACEPE.png"
)
materials <- lapply(folders,function(x) paste0(path,x))
names(materials) <- names
return(materials)
}
load_materials()
load_materials("./")
shiny::runApp("./inst/DataMetProcess_Shiny/2App.R")
shiny::runApp("./inst/DataMetProcess_Shiny/2App.R")
remove.packages("DataMetProcess")
devtools::document()
rstudioapi::restartSession()
getwd()
remove.packages("DataMetProcess")
devtools::document()
devtools::document()
file.remove("../DataMetProcess_1.0.1.tar.gz")
devtools::build()
rstudioapi::restartSession()
install.packages("../DataMetProcess_1.0.1.tar.gz")
shiny::runApp(system.file("2App",package="DataMetProcess"))
shiny::runApp(system.file("2App.R",package="DataMetProcess"))
shiny::runApp(system.file("DataMetProcess_Shiny",package="DataMetProcess"))
shiny::runApp(system.file("DataMetProcess_Shiny/2App.R",package="DataMetProcess"))
remove.packages("DataMetProcess")
devtools::document()
devtools::document()
file.remove("../DataMetProcess_1.0.1.tar.gz")
devtools::build()
remove.packages("DataMetProcess")
devtools::document()
devtools::document()
file.remove("../DataMetProcess_1.0.1.tar.gz")
file.remove("../DataMetProcess_1.0.2.tar.gz")
devtools::build()
rstudioapi::restartSession()
install.packages("../DataMetProcess_1.0.2.tar.gz")
file.remove("../DataMetProcess_1.0.1.tar.gz")
devtools::build()
rstudioapi::restartSession()
install.packages("../DataMetProcess_1.0.2.tar.gz")
DataMetProcess::DMPshiny()
remove.packages("DataMetProcess")
devtools::document()
file.remove("../DataMetProcess_1.0.2.tar.gz")
devtools::build()
rstudioapi::restartSession()
DataMetProcess::DMPshiny()
install.packages("../DataMetProcess_1.0.2.tar.gz")
DataMetProcess::DMPshiny()
library(shiny)
DataMetProcess::DMPshiny()
DataMetProcess::DMPshiny()
remove.packages("DataMetProcess")
devtools::document()
devtools::document()
devtools::check()
remove.packages("DataMetProcess")
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_dep_version()
devtools::check_dep_version()
?devtools::check_dep_version()
devtools::check_dep_version()
remove.packages("DataMetProcess")
devtools::document()
devtools::check()
remove.packages("DataMetProcess")
devtools::document()
devtools::check()
file.remove("../DataMetProcess_1.0.1.tar.gz")
file.remove("../DataMetProcess_1.0.2.tar.gz")
devtools::build()
check --as-cran
R CMD check --as-cran
remove.packages("DataMetProcess")
devtools::document()
devtools::check()
devtools::build()
rstudioapi::restartSession()
install.packages("../DataMetProcess_1.0.1.tar.gz")
file.remove("../DataMetProcess_1.0.1.tar.gz")
file.remove("../DataMetProcess_1.0.1.tar.gz")
install.packages("../DataMetProcess_1.0.2.tar.gz")
remove.packages("DataMetProcess")
devtools::document()
devtools::document()
install.packages("../DataMetProcess_1.0.2.tar.gz")
remove.packages("DataMetProcess")
rstudioapi::restartSession()
install.packages("../DataMetProcess_1.0.2.tar.gz")
devtools::build()
?install.packages
?library
df <-
read.table(
"./inst/extdata/ex1_inmet.CSV",
h=TRUE,
sep = ";",
dec = ",",
skip = 8,
na.strings = -9999,
check.names = FALSE
)
adjustDate <- function(
data = NULL,
col_date = NULL,
col_hour = NULL,
fuso = NULL
){
# Initialize the variable Date_Hour as NULL
Date_Hour <- NULL
# Extract the first two characters (hours) from the col_hour column and overwrite the column in the data frame
data[col_hour] <- substr(unlist(data[col_hour], use.names = FALSE), 1, 2)
# Combine the col_date and col_hour columns into a new column called 'Date_Hour'
data <- tidyr::unite(data, 'Date_Hour',
dplyr::any_of(col_date),
dplyr::any_of(col_hour),
remove = TRUE, sep = " ")
# Convert the 'Date_Hour' column to the appropriate datetime format
data <- dplyr::mutate(
data,
Date_Hour = lubridate::as_datetime(
base::format(
base::as.POSIXct(
base::strptime(Date_Hour, "%Y-%m-%d %H"),
usetz = TRUE,
tz = "Etc/GMT-0"
),
tz = fuso
)
)
)
# Return the modified data frame
return(data)
}
df <-
adjustDate(df,
colnames(df)[1],
colnames(df)[2],
fuso = "America/Bahia")
df
df |> head()
df <-
read.table(
"./inst/extdata/ex1_inmet.CSV",
h=TRUE,
sep = ";",
dec = ",",
skip = 8,
na.strings = -9999,
check.names = FALSE
)
df$Data = as.Date(df$Data,format = "%d/%m/%Y")
df <-
adjustDate(df,
colnames(df)[1],
colnames(df)[2],
fuso = "America/Bahia")
df[1:3] |> head()
df <-
read.table(
"./inst/extdata/ex1_inmet.CSV",
h=TRUE,
sep = ";",
dec = ",",
skip = 8,
na.strings = -9999,
check.names = FALSE
)
df$Data = as.Date(df$Data,format = "%d/%m/%Y")
data <- df
data[col_hour] <- substr(unlist(data[col_hour], use.names = FALSE), 1, 2)
col_date = colnames(df)[1]
col_hour = colnames(df)[2]
data[col_hour] <- substr(unlist(data[col_hour], use.names = FALSE), 1, 2)
tidyr::unite(data, 'Date_Hour',
dplyr::any_of(col_date),
dplyr::any_of(col_hour),
remove = TRUE, sep = " ") |>
head()
tidyr::unite(data, 'Date_Hour',
{{col_date}},
dplyr::any_of(col_hour),
remove = TRUE, sep = " ") |>
head()
tidyr::unite(data, 'Date_Hour',
{{col_date}},
{{col_hour}},
remove = TRUE, sep = " ") |>
head()
tidyr::unite(data, 'Date_Hour',
{{"col_date"}},
{{col_hour}},
remove = TRUE, sep = " ") |>
head()
tidyr::unite(data, 'Date_Hour',
{{col_date}},
{{col_hour}},
remove = TRUE, sep = " ") |>
head()
tidyr::unite(data, {{'Date_Hour'}},
{{col_date}},
{{col_hour}},
remove = TRUE, sep = " ") |>
head()
rlang::last_trace()
OlsonNames()
?OlsonNames
#' @title
#' Fix the time zone
#'
#' @description
#' Allows you to correct the timezone based on a date column and another time column
#'
#' @param data Data frame containing the data
#' @param col_date Column containing the dates
#' @param col_hour Column containing the time. It must be in the format "hh", "hh:mm", or "hh:mm:ss"; only the hours "hh" will be used for conversion.
#' @param fuso Time zone for correction. Query OlsonNames()
#'
#' @return
#' Data frame with the corrected timezone
#'
#' @export
#'
#' @import tidyr
#' @import dplyr
#' @import lubridate
#' @import rlang
#'
#' @examples
#' address <-
#'  base::system.file("extdata",
#'                     "ex1_inmet.CSV",
#'                     package = "DataMetProcess")
#'
#' df <-
#'   read.table(
#'     address,
#'     h=TRUE,
#'     sep = ";",
#'     dec = ",",
#'     skip = 8,
#'     na.strings = -9999,
#'     check.names = FALSE
#'   )
#'
#' df$Data = as.Date(df$Data,format = "%d/%m/%Y")
#'
#'
#' df <-
#'   adjustDate(df,
#'              colnames(df)[1],
#'              colnames(df)[2],
#'              fuso = "America/Bahia")
#'
#' head(df[1:2])
#'
adjustDate <- function(
data = NULL,
col_date = NULL,
col_hour = NULL,
fuso = NULL
){
# Initialize the variable Date_Hour as NULL
Date_Hour <- NULL
# Extract the first two characters (hours) from the col_hour column and overwrite the column in the data frame
data[col_hour] <- substr(unlist(data[col_hour], use.names = FALSE), 1, 2)
# Combine the col_date and col_hour columns into a new column called 'Date_Hour'
data <- tidyr::unite(data, 'Date_Hour',
{{col_date}},
{{col_hour}},
remove = TRUE, sep = " ")
# Convert the 'Date_Hour' column to the appropriate datetime format
data <- dplyr::mutate(
data,
Date_Hour = lubridate::as_datetime(
base::format(
base::as.POSIXct(
base::strptime(Date_Hour, "%Y-%m-%d %H"),
usetz = TRUE,
tz = "Etc/GMT-0"
),
tz = fuso
)
)
)
# Return the modified data frame
return(data)
}
df <-
read.table(
"./inst/extdata/ex1_inmet.CSV",
h=TRUE,
sep = ";",
dec = ",",
skip = 8,
na.strings = -9999,
check.names = FALSE
)
df$Data = as.Date(df$Data,format = "%d/%m/%Y")
data <- df
col_date = colnames(df)[1]
col_hour = colnames(df)[2]
data[col_hour] <- substr(unlist(data[col_hour], use.names = FALSE), 1, 2)
tidyr::unite(data, 'Date_Hour',
{{col_date}},
{{col_hour}},
remove = TRUE, sep = " ") |>
head()
df <-
adjustDate(df,
colnames(df)[1],
colnames(df)[2],
fuso = "America/Bahia")
df[1:3] |> head()
col_date
col_date <- "Date_Hour"
select(data,{{col_date}})
dplyr::select(data,{{col_date}})
data
df
data <- df
dplyr::select(data,{{col_date}})
dplyr::mutate(
data,
{{col_date}} = 1
dplyr::mutate(
data,
{{col_date}} := 1
)
dplyr::mutate(
data,
{{col_date}} :=
base::as.Date(base::format({{col_date}},
format = "%Y-%m-01"))
) |> head()
data$Date_Hour[1]
as.Date(data$Date_Hour[1],format = "%Y-%m-01")
as.Date(data$Date_Hour[1],format = "%Y-%m-01")
as.Date(data$Date_Hour[1],format = "%Y-%m-01")
as.Date(data$Date_Hour[1],format = "%Y-%m-01")
?as.Date
as.Date(data$Date_Hour[1])
data$Date_Hour <- as.Date(data$Date_Hour)
dplyr::mutate(
data,
{{col_date}} :=
base::as.Date(base::format({{col_date}},
format = "%Y-%m-01"))
)
data$Date_Hour[1]
data |> tidyr::as_tibble()
data$Date_Hour[1]
dplyr::mutate(data,!!rlang::sym(col_date) :=
base::as.Date(base::format(!!rlang::sym(col_date),
format = "%Y-%m-01"))
)
dplyr::mutate(
data,
{{col_date}} :=
base::as.Date(base::format({{col_date}},
format = "%Y-%m-01"))
)
dplyr::mutate(
data,
{{col_date}} :=
base::as.Date(base::format(!!{{col_date}},
format = "%Y-%m-01"))
)
dplyr::mutate(
data,
{{col_date}} :=
base::as.Date(base::format(!!rlang::sym(col_date),
format = "%Y-%m-01"))
)
dplyr::mutate(
data,
{{col_date}} :=
base::as.Date(base::format({{col_date}},
format = "%Y-%m-01"))
)
dplyr::summarise(
dplyr::group_by(
data,
Data = {{col_date}}
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
col_sum = colnames(df)[c(2,6)]
col_mean = colnames(df)[c(3,7,8,15,16,18)]
col_max = colnames(df)[4,9,11,13,17]
col_min = colnames(df)[5,10,12,14], type = "Daily")
col_min = colnames(df)[5,10,12,14]
type = "Daily"
col_date <- "Date_Hour"
col_sum = colnames(df)[c(2,6)]
col_mean = colnames(df)[c(3,7,8,15,16,18)]
col_max = colnames(df)[4,9,11,13,17]
col_min = colnames(df)[5,10,12,14]
type = "Daily"
dplyr::summarise(
dplyr::group_by(
data,
Data = {{col_date}}
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
col_max = colnames(df)[4,9,11,13,17]
col_sum = colnames(data)[c(2,6)]
col_mean = colnames(data)[c(3,7,8,15,16,18)]
col_max = colnames(data)[4,9,11,13,17]
col_max = colnames(data)[c(4,9,11,13,17)]
col_min = colnames(data)[5,10,12,14]
col_min = colnames(data)[c(5,10,12,14)]
dplyr::summarise(
dplyr::group_by(
data,
Data = {{col_date}}
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
data$Date_Hour
dplyr::summarise(
dplyr::group_by(
data,
Data = !!rlang::sym(col_date)
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
col_date
dplyr::summarise(
dplyr::group_by(
data,
Date = col_date
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
dplyr::summarise(
dplyr::group_by(
data,
Date = {{col_date}}
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
col_date
dplyr::summarise(
dplyr::group_by(
data,
Date = !!rlang::sym(col_date)
),
dplyr::across(dplyr::any_of(col_sum), \(x) base::sum(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_mean), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_max), \(x) base::mean(x, na.rm = T)),
dplyr::across(dplyr::any_of(col_min), \(x) base::mean(x, na.rm = T))
)
dplyr::summarise(
dplyr::group_by(
data,
Date = !!rlang::sym(col_date)
),
dplyr::across({{col_sum}}, \(x) base::sum(x, na.rm = T)),
dplyr::across({{col_mea}}, \(x) base::mean(x, na.rm = T)),
dplyr::across({{col_max}}, \(x) base::mean(x, na.rm = T)),
dplyr::across({{col_min}}, \(x) base::mean(x, na.rm = T))
)
dplyr::summarise(
dplyr::group_by(
data,
Date = !!rlang::sym(col_date)
),
dplyr::across({{col_sum}}, \(x) base::sum(x, na.rm = T)),
dplyr::across({{col_mean}}, \(x) base::mean(x, na.rm = T)),
dplyr::across({{col_max}}, \(x) base::mean(x, na.rm = T)),
dplyr::across({{col_min}}, \(x) base::mean(x, na.rm = T))
)
